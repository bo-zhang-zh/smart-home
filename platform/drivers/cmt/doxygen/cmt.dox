/*!
@defgroup cmt CMT: Carrier Modulator Transmitter Driver
@details The carrier modulator transmitter (CMT) module provides the means to generate
the protocol timing and carrier signals for a side variety of encoding schemes. The CMT
incorporates hardware to off-load the critical and/or lengthy timing requirements associated
with signal generation from the CPU. The KSDK provides a driver for the CMT module of the Kinetis devices.

# Clock formulas {#CMTClkf}
The CMT module has internal clock dividers. It was originally designed to be based on an 8 MHZ
bus clock that could be divided by 1, 2, 4, or 8 according to the specification. To be compatible
with higher bus frequency, the primary prescaler (PPS) was developed to receive a higher frequency
and generate a clock enable signal called an intermediate frequency (IF). The IF must be approximately
equal to 8MHz and works as a clock enable to the secondary prescaler. For the PPS, the prescaler
is selected according to the bus clock to generate an intermediate clock approximately to 8 MHz
and is selected as (bus_clock_hz/8000000). The secondary prescaler is the "cmtDivider". The clocks
for the CMT module are listed below:

1. CMT clock frequency = bus_clock_Hz / (bus_clock_Hz / 8000000) / cmtDivider   \n
2. CMT carrier and generator frequency = CMT clock frequency / (highCount1 + lowCount1)  \n
   (In FSK mode, the second frequency = CMT clock frequency / (highCount2 + lowCount2))   \n
3. CMT infrared output signal frequency    \n
   a. In Time and Baseband mode            \n
   CMT IRO signal mark time = (markCount + 1) / (CMT clock frequency / 8)    \n
   CMT IRO signal space time = spaceCount / (CMT clock frequency / 8)        \n
   b. In FSK mode                                                            \n
   CMT IRO signal mark time = (markCount + 1) / CMT carrier and generator frequency \n
   CMT IRO signal space time = spaceCount / CMT carrier and generator frequency     \n

# Typical use case {#CMTTpyUC}

This is an example code to initialize the data:

~~~~~{.c}

    cmt_config_t config;
    cmt_modulate_config_t modulateConfig;
    uint32_t busClock;

    // Gets the bus clock for the CMT module.
    busClock = CLOCK_GetFreq(kCLOCK_BusClk);

    CMT_GetDefaultConfig(&config);

    // Interrupts is enabled to change the modulate mark and space count.
    config.isInterruptEnabled = true;
    CMT_Init(CMT, &config, busClock);

    // Prepares the modulate configuration for a user case.
    modulateConfig.highCount1 = ...;
    modulateConfig.lowCount1 = ...;
    modulateConfig.markCount = ...;
    modulateConfig.spaceCount = ...;

    // Sets the time mode.
    CMT_SetMode(CMT, kCMT_TimeMode, &modulateConfig);

~~~~~

This is an example IRQ handler to change the mark and space count to complete the data modulation:

~~~~~{.c}

// The data length has been transmitted.
uint32_t g_CmtDataBitLen;

void CMT_IRQHandler(void)
{
    if (CMT_GetStatusFlags(CMT))
    {
        if (g_CmtDataBitLen <= CMT_TEST_DATA_BITS)
        {
            // LSB.
            if (data & ((uint32_t)0x01 << g_CmtDataBitLen))
            {
                CMT_SetModulateMarkSpace(CMT, g_CmtModDataOneMarkCount, g_CmtModDataOneSpaceCount);
            }
            else
            {
                CMT_SetModulateMarkSpace(CMT, g_CmtModDataZeroMarkCount, g_CmtModDataZeroSpaceCount);
            }
        }
    }
}

~~~~~

*/

