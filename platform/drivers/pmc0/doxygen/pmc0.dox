/*!
@defgroup pmc0 PMC0: Power Management Controller
@details The KSDK provides a Peripheral driver for the Power Management Controller (PMC) module of Kinetis devices. The Power Management Controller (PMC) can be divided in two parts: PMC 0 and PMC 1. The PMC 0 controls the Core 0, its SoG and RAM, and the PMC 1 controls the Core 1, its SoG and RAM. This driver is for PMC 0 only.

The PMC 0 has:
- the high-power (HP) and low-power (LP) Core Regulator;
- the high-power (HP) and low-power (LP) Array Regulator;
- the high-power (HP) and low-power (LP) 1.2V Low Voltage Detector (LVD) monitor (in regulators input);
- the high-power (HP) and low-power (LP) 1.2V High Voltage Detector (HVD) monitor (in regulators input);
- the bandgap;
- the forward bias (FBB) and the reverse back bias (RBB).
In addition, the PMC has a 1.8V POR (Power-On Reset) monitor to assure the voltage level in the Always-On power domain would be in the correct range to the correct functionality of the internal digital and analog blocks.
Both PMCs receive requests from the MSMC to change the current power mode. Each PMC allows the customer to choose what features will be enabled or disabled for each power mode using the PMC registers.

# Typical use case {#PMC0TpyUC}

## Turn on the PMC 1 using LDO Regulator{#PMC0TurnOnPMC1LdoRegulator}
After a POR event, when the PMC 0 is during RUN mode and the PMC 1 is turned off.
The procedure to turn on the PMC 1 using the internal LDO Regulator.

~~~~~{.c}
	/* Enables PMC 1 LDO Regulator. */
	PMC0_EnablePmc1LdoRegulator(true);
	/* Disables to wait LDO OK signal, optional. */
	PMC0_EnableWaitLdoOkSignal(false);
	/* Powers on PMC 1. */
	PMC0_PowerOnPmc1();	
~~~~~

## Turn on the PMC 1 using the PMIC{#PMC0TurnOnPMC1PMIC}
After a POR event, when the PMC 0 is during RUN mode and the PMC 1 is turned off.
The procedure to turn on the PMC 1 using the external PMIC

~~~~~{.c}
	/* Disables PMC 1 LDO Regulator. */
	PMC0_EnablePmc1LdoRegulator(false);
	/* Powers on PMC 1. */
	PMC0_PowerOnPmc1();	
~~~~~

## Turn off the LDO Regulator{#PMC0TurnOffLdoRegulator}
When the PMC 1 is during RUN mode, the LDO Regulator can be programmed to be
turned off in the next transition from RUN to VLLS power mode. As in VLLS the
regulator is disconnected from the load by the switches (switches are OFF), a external
regulator can assume the power supply (PMIC).

~~~~~{.c}
	/* PMC 0 VLLS power mode configuration. */
    const pmc0_vlls_mode_config_t vllsModeConfig = 
	{.arrayRegulatorSelect = kPMC0_VllsArrayLowPowerRegulator, /*!< Array LP regulator is selected. */
	 .lvdMonitorSelect = kPMC0_LowVoltDetectLowPowerMonitor, /*!< LP monitor is selected */
	 .hvdMonitorSelect = kPMC0_HighVoltDetectLowPowerMonitor, /*!< LP monitor is selected */
	 .enableForceHpBandgap = false}; /* Force HP band-gap is disabled. */

	/* Disables PMC 1 LDO Regulator. */
	PMC0_EnablePmc1LdoRegulator(false);
	/* Selects LP monitor for both 1.2V HVD and LVD Monitor when PMC 0 is in VLLS mode. */
	PMC0_ConfigureVllsMode(&vllsModeConfig);
	/* Transit the PMC 1 to RUN mode, see MSMSC. */
	......
~~~~~

## Turn on the LDO Regulator{#PMC0TurnOnLdoRegulator}
When the PMC 1 is during VLLS mode, the LDO Regulator can be turned on in a
transition to RUN mode.

~~~~~{.c}
	/* Enables PMC 1 LDO Regulator. */
	PMC0_EnablePmc1LdoRegulator(true);
	/* Disables to wait LDO OK signal, optional. */
	PMC0_EnableWaitLdoOkSignal(false);
	/* Transit the PMC 1 to RUN mode, see MSMSC. */
	......
~~~~~

## Change the Core Regulator voltage level in PMC 0 RUN or HSRUN mode{#PMC0ChangeCoreRegulatorVoltLevel}
To change the Core Regulator voltage level when the PMC 0 is in RUN mode:

~~~~~{.c}
	/* PMC 0 RUN power mode configuration. */
	const pmc0_run_mode_config_t runModeConfig = 
	{.coreRegulatorVoltLevel = 0b110001U}; /* Core Voltage Level is 1.127V. */

	/* Read and confirm that the Core Regulator Voltage Level Flag is cleared. */
	while (kPMC0_CoreRegulatorVoltLevelFlag & PMC0_GetStatusFlags())
    {
    }
	/* Change the Core Regulator voltage level when PMC 0 is in RUN mode. */
 	PMC0_ConfigureRunMode(&runModeConfig); 
	/* Wait for the Core Regulator Voltage Level Flag to be cleared. */
	while (kPMC0_CoreRegulatorVoltLevelFlag & PMC0_GetStatusFlags())
    {
    }
~~~~~

To change the Core Regulator voltage level when the PMC 0 is in HSRUN mode:

~~~~~{.c}
	/* PMC 0 HSRUN power mode configuration. */
	const pmc0_hsrun_mode_config_t hsRunModeConfig = 
	{.coreRegulatorVoltLevel = 0b110001U, /* Core Voltage Level is 1.127V. */
	 .enableForwardBias = false}; /* FBB is disabled. */

	/* Read and confirm that the Core Regulator Voltage Level Flag is cleared. */
	while (kPMC0_CoreRegulatorVoltLevelFlag & PMC0_GetStatusFlags())
    {
    }
	/* Change the Core Regulator voltage level when PMC 0 is in HSRUN mode. */
 	PMC0_ConfigureHsrunMode(&hsRunModeConfig); 
	/* Wait for the Core Regulator Voltage Level Flag to be cleared. */
	while (kPMC0_CoreRegulatorVoltLevelFlag & PMC0_GetStatusFlags())
    {
    }
~~~~~

## Change the SRAMs power mode during PMC 0 RUN mode{#PMC0ChangeSramPowerMode}
To change the SRAMs power mode during the PMC 0 RUN mode.

~~~~~{.c}
	/* Read and confirm that the SRAM flag is cleared. */
	while (kPMC0_SramFlag & PMC0_GetStatusFlags())
    {
    }
	/* Enable band 0 and 1 in ASD or ARRAY_SHUTDOWN during all modes except VLLS. */
 	PMC0_ConfigureSramBankPowerDown(0x3U); 
	/* Wait for SRAM flag to be cleared. */
	while (kPMC0_SramFlag & PMC0_GetStatusFlags())
    {
    }
~~~~~

*/

